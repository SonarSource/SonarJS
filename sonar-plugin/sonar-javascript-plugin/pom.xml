<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.sonarsource.javascript</groupId>
    <artifactId>sonar-plugin</artifactId>
    <version>10.22.0-SNAPSHOT</version>
  </parent>

  <artifactId>sonar-javascript-plugin</artifactId>
  <packaging>sonar-plugin</packaging>

  <name>SonarQube JavaScript :: Plugin</name>
  <!-- Be careful when altering <description> as its value shows up in the SonarQube GUI -->
  <description>Code Analyzer for JavaScript/TypeScript/CSS</description>
  <url>http://redirect.sonarsource.com/plugins/javascript.html</url>

  <scm>
    <connection>scm:git:git@github.com:SonarSource/sonar-javascript.git</connection>
    <developerConnection>scm:git:git@github.com:SonarSource/sonar-javascript.git</developerConnection>
    <url>https://github.com/SonarSource/sonar-javascript</url>
    <tag>HEAD</tag>
  </scm>

  <properties>
    <nodeVersion>22.11.0</nodeVersion>
    <artifactoryToken/>
  </properties>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>api</artifactId>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>bridge</artifactId>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>css</artifactId>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>javascript-checks</artifactId>
    </dependency>

    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.sonarsource.api.plugin</groupId>
      <artifactId>sonar-plugin-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.sonarsource.sonarqube</groupId>
      <artifactId>sonar-plugin-api-impl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.sonarsource.analyzer-commons</groupId>
      <artifactId>sonar-analyzer-commons</artifactId>
    </dependency>

    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
    </dependency>
    <dependency>
      <groupId>org.sonarsource.sonarlint.core</groupId>
      <artifactId>sonarlint-plugin-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.sonarsource.api.plugin</groupId>
      <artifactId>sonar-plugin-api-test-fixtures</artifactId>
    </dependency>
    <dependency>
      <groupId>org.sonarsource.sonarlint.core</groupId>
      <artifactId>sonarlint-core</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.sonarsource.sonar-packaging-maven-plugin</groupId>
        <artifactId>sonar-packaging-maven-plugin</artifactId>
          <configuration>
            <jreMinVersion>${jdk.min.version}</jreMinVersion>
            <pluginApiMinVersion>${pluginApiMinVersion}</pluginApiMinVersion>
            <pluginName>JavaScript/TypeScript/CSS Code Quality and Security</pluginName>
            <pluginClass>org.sonar.plugins.javascript.JavaScriptPlugin</pluginClass>
            <requiredForLanguages>js,ts,css,web,yaml</requiredForLanguages>
            <skipDependenciesPackaging>true</skipDependenciesPackaging>
            <sonarLintSupported>true</sonarLintSupported>
          </configuration>
      </plugin>

      <plugin>
        <groupId>org.sonarsource.javascript</groupId>
        <artifactId>sonarjs-maven-plugin</artifactId>
        <version>1</version>
        <executions>
          <execution>
            <id>Download the Node.js runtimes</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>download-runtimes</goal>
            </goals>
            <configuration>
              <!-- to preserve backward compatibility, we have to pass the redundant version argument -->
              <version>v${nodeVersion}</version>
              <targetDirectory>${project.basedir}/downloads/runtimes</targetDirectory>
              <proxyToken>${artifactoryToken}</proxyToken>
              <flavors>
                <flavor>
                  <name>darwin-arm64</name>
                  <checksum>2e89afe6f4e3aa6c7e21c560d8a0453d84807e97850bbb819b998531a22bdfde</checksum>
                  <url>https://nodejs.org/dist/v${nodeVersion}/node-v${nodeVersion}-darwin-arm64.tar.gz</url>
                  <proxyUrl>https://repox.jfrog.io/artifactory/nodejs-dist/v${nodeVersion}/node-v${nodeVersion}-darwin-arm64.tar.gz</proxyUrl>
                  <binaryName>bin/node</binaryName>
                </flavor>
                <flavor>
                  <name>darwin-x64</name>
                  <checksum>668d30b9512137b5f5baeef6c1bb4c46efff9a761ba990a034fb6b28b9da2465</checksum>
                  <url>https://nodejs.org/dist/v${nodeVersion}/node-v${nodeVersion}-darwin-x64.tar.gz</url>
                  <proxyUrl>https://repox.jfrog.io/artifactory/nodejs-dist/v${nodeVersion}/node-v${nodeVersion}-darwin-x64.tar.gz</proxyUrl>
                  <binaryName>bin/node</binaryName>
                </flavor>
                <flavor>
                  <name>linux-arm64</name>
                  <checksum>27453f7a0dd6b9e6738f1f6ea6a09b102ec7aa484de1e39d6a1c3608ad47aa6a</checksum>
                  <url>https://nodejs.org/dist/v${nodeVersion}/node-v${nodeVersion}-linux-arm64.tar.gz</url>
                  <proxyUrl>https://repox.jfrog.io/artifactory/nodejs-dist/v${nodeVersion}/node-v${nodeVersion}-linux-arm64.tar.gz</proxyUrl>
                  <binaryName>bin/node</binaryName>
                </flavor>
                <flavor>
                  <name>linux-x64</name>
                  <checksum>4f862bab52039835efbe613b532238b6e4dde98d139a34e6923193e073438b13</checksum>
                  <url>https://nodejs.org/dist/v${nodeVersion}/node-v${nodeVersion}-linux-x64.tar.gz</url>
                  <proxyUrl>https://repox.jfrog.io/artifactory/nodejs-dist/v${nodeVersion}/node-v${nodeVersion}-linux-x64.tar.gz</proxyUrl>
                  <binaryName>bin/node</binaryName>
                </flavor>
                <flavor>
                  <name>linux-x64-musl</name>
                  <checksum>c9b4eba63f6569547e3a3423b446613a5a56dffb571b10f556bac2ae45fdc1fb</checksum>
                  <url>https://unofficial-builds.nodejs.org/download/release/v${nodeVersion}/node-v${nodeVersion}-linux-x64-musl.tar.gz</url>
                  <proxyUrl>https://repox.jfrog.io/artifactory/nodejs-dist/v${nodeVersion}/node-v${nodeVersion}-linux-x64-musl.tar.gz</proxyUrl>
                  <binaryName>bin/node</binaryName>
                </flavor>
                <flavor>
                  <name>win-x64</name>
                  <checksum>905373a059aecaf7f48c1ce10ffbd5334457ca00f678747f19db5ea7d256c236</checksum>
                  <url>https://nodejs.org/dist/v${nodeVersion}/node-v${nodeVersion}-win-x64.zip</url>
                  <proxyUrl>https://repox.jfrog.io/artifactory/nodejs-dist/v${nodeVersion}/node-v${nodeVersion}-win-x64.zip</proxyUrl>
                  <binaryName>node.exe</binaryName>
                </flavor>
              </flavors>
            </configuration>
          </execution>
          <execution>
            <id>Compress the Node.js runtimes</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>compress</goal>
            </goals>
            <configuration>
              <baseDirectory>${project.basedir}/downloads/runtimes</baseDirectory>
              <filenames>
                <filename>darwin-arm64/bin/node</filename>
                <filename>darwin-x64/bin/node</filename>
                <filename>linux-arm64/bin/node</filename>
                <filename>linux-x64/bin/node</filename>
                <filename>linux-x64-musl/bin/node</filename>
                <filename>win-x64/node.exe</filename>
              </filenames>
              <targetDirectory>${project.basedir}/downloads/runtimes</targetDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.3.1</version>
        <executions>
          <execution>
            <id>Deploy the Node.js runtimes to the test classes</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>${project.basedir}/downloads/runtimes</directory>
                  <includes>
                    <include>**/*.xz</include>
                    <include>**/version.txt</include>
                  </includes>
                </resource>
              </resources>
              <outputDirectory>${project.build.directory}/test-classes/runtimes</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.6.0</version>
        <configuration>
          <minimizeJar>true</minimizeJar>
          <createDependencyReducedPom>false</createDependencyReducedPom>
        </configuration>
        <executions>
          <execution>
            <id>win-x64</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>win-x64</shadedClassifierName>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <!-- This is used to get plugin version at runtime using getPackage().getImplementationVersion() -->
                    <Implementation-Version>${project.version}</Implementation-Version>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>win-x64/node.exe.xz</resource>
                  <file>${project.basedir}/downloads/runtimes/win-x64/node.exe.xz</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>win-x64/version.txt</resource>
                  <file>${project.basedir}/downloads/runtimes/win-x64/version.txt</file>
                </transformer>
              </transformers>
            </configuration>
          </execution>

          <execution>
            <id>linux-x64</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>linux-x64</shadedClassifierName>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <!-- This is used to get plugin version at runtime using getPackage().getImplementationVersion() -->
                    <Implementation-Version>${project.version}</Implementation-Version>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>linux-x64/node.xz</resource>
                  <file>${project.basedir}/downloads/runtimes/linux-x64/bin/node.xz</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>linux-x64/version.txt</resource>
                  <file>${project.basedir}/downloads/runtimes/linux-x64/version.txt</file>
                </transformer>
              </transformers>
            </configuration>
          </execution>

          <execution>
            <id>linux-x64-musl</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>linux-x64-musl</shadedClassifierName>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <!-- This is used to get plugin version at runtime using getPackage().getImplementationVersion() -->
                    <Implementation-Version>${project.version}</Implementation-Version>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>linux-x64-musl/node.xz</resource>
                  <file>${project.basedir}/downloads/runtimes/linux-x64-musl/bin/node.xz</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>linux-x64-musl/version.txt</resource>
                  <file>${project.basedir}/downloads/runtimes/linux-x64-musl/version.txt</file>
                </transformer>
              </transformers>
            </configuration>
          </execution>

          <execution>
            <id>darwin-arm64</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>darwin-arm64</shadedClassifierName>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <!-- This is used to get plugin version at runtime using getPackage().getImplementationVersion() -->
                    <Implementation-Version>${project.version}</Implementation-Version>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>darwin-arm64/node.xz</resource>
                  <file>${project.basedir}/downloads/runtimes/darwin-arm64/bin/node.xz</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>darwin-arm64/version.txt</resource>
                  <file>${project.basedir}/downloads/runtimes/darwin-arm64/version.txt</file>
                </transformer>
              </transformers>
            </configuration>
          </execution>

          <execution>
            <id>darwin-x64</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>darwin-x64</shadedClassifierName>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <!-- This is used to get plugin version at runtime using getPackage().getImplementationVersion() -->
                    <Implementation-Version>${project.version}</Implementation-Version>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>darwin-x64/node.xz</resource>
                  <file>${project.basedir}/downloads/runtimes/darwin-x64/bin/node.xz</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>darwin-x64/version.txt</resource>
                  <file>${project.basedir}/downloads/runtimes/darwin-x64/version.txt</file>
                </transformer>
              </transformers>
            </configuration>
          </execution>

          <execution>
            <id>linux-arm64</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>linux-arm64</shadedClassifierName>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <!-- This is used to get plugin version at runtime using getPackage().getImplementationVersion() -->
                    <Implementation-Version>${project.version}</Implementation-Version>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>linux-arm64/node.xz</resource>
                  <file>${project.basedir}/downloads/runtimes/linux-arm64/bin/node.xz</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>linux-arm64/version.txt</resource>
                  <file>${project.basedir}/downloads/runtimes/linux-arm64/version.txt</file>
                </transformer>
              </transformers>
            </configuration>
          </execution>

          <execution>
            <id>multi</id>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>multi</shadedClassifierName>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <!-- This is used to get plugin version at runtime using getPackage().getImplementationVersion() -->
                    <Implementation-Version>${project.version}</Implementation-Version>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>win-x64/node.exe.xz</resource>
                  <file>${project.basedir}/downloads/runtimes/win-x64/node.exe.xz</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>win-x64/version.txt</resource>
                  <file>${project.basedir}/downloads/runtimes/win-x64/version.txt</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>linux-x64/node.xz</resource>
                  <file>${project.basedir}/downloads/runtimes/linux-x64/bin/node.xz</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>linux-x64/version.txt</resource>
                  <file>${project.basedir}/downloads/runtimes/linux-x64/version.txt</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>linux-x64-musl/node.xz</resource>
                  <file>${project.basedir}/downloads/runtimes/linux-x64-musl/bin/node.xz</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>linux-x64-musl/version.txt</resource>
                  <file>${project.basedir}/downloads/runtimes/linux-x64-musl/version.txt</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>darwin-arm64/node.xz</resource>
                  <file>${project.basedir}/downloads/runtimes/darwin-arm64/bin/node.xz</file>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                  <resource>darwin-arm64/version.txt</resource>
                  <file>${project.basedir}/downloads/runtimes/darwin-arm64/version.txt</file>
                </transformer>
              </transformers>
            </configuration>
          </execution>

          <!-- what is the purpose of this step -->
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <shadedArtifactAttached>false</shadedArtifactAttached>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <!-- This is used to get plugin version at runtime using getPackage().getImplementationVersion() -->
                    <Implementation-Version>${project.version}</Implementation-Version>
                    <!-- Keep in sync with NodeDeprecationWarning#MIN_SUPPORTED_NODE_VERSION -->
                    <NodeJs-Min-Version>18.17.0</NodeJs-Min-Version>
                  </manifestEntries>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-plugin-size</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <phase>verify</phase>
            <configuration>
              <rules>
                <requireFilesSize>
                  <minsize>65000000</minsize>
                  <maxsize>110000000</maxsize>
                  <files>
                    <file>${project.build.directory}/${project.build.finalName}-multi.jar</file>
                  </files>
                </requireFilesSize>
                <requireFilesSize>
                  <minsize>25000000</minsize>
                  <maxsize>55000000</maxsize>
                  <files>
                    <file>${project.build.directory}/${project.build.finalName}-linux-x64.jar</file>
                    <file>${project.build.directory}/${project.build.finalName}-linux-x64-musl.jar</file>
                    <file>${project.build.directory}/${project.build.finalName}-win-x64.jar</file>
                    <file>${project.build.directory}/${project.build.finalName}-darwin-arm64.jar</file>
                  </files>
                </requireFilesSize>
                <requireFilesSize>
                  <minsize>8000000</minsize>
                  <maxsize>15000000</maxsize>
                  <files>
                    <file>${project.build.directory}/${project.build.finalName}.jar</file>
                  </files>
                </requireFilesSize>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
</project>

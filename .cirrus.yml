env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.artifactory_url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]

  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

container_definition: &CONTAINER_DEFINITION
  eks_container:
    cluster_name: ${CIRRUS_CLUSTER_NAME}
    builder_role: cirrus-builder
    builder_image: docker-builder-v*
    builder_instance_type: t3.small
    region: eu-central-1
    namespace: default
    use_in_memory_disk: true
    image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
    cpu: 10
    memory: 40G

alpine_container_definition: &ALPINE_CONTAINER_DEFINITION
  <<: *CONTAINER_DEFINITION
  eks_container:
    dockerfile: .cirrus/alpine.Dockerfile

small_container_definition: &SMALL_CONTAINER
  <<: *CONTAINER_DEFINITION
  eks_container:
    cpu: 2
    memory: 4G

node_min_supported_container_definition: &NODE_MIN_SUPPORTED_CONTAINER_DEFINITION
  <<: *CONTAINER_DEFINITION
  eks_container:
    dockerfile: .cirrus/nodejs.Dockerfile
    docker_arguments:
      CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}

node_recommended_container_definition: &NODE_RECOMMENDED_CONTAINER_DEFINITION
  <<: *NODE_MIN_SUPPORTED_CONTAINER_DEFINITION
  eks_container:
    docker_arguments:
      NODE_VERSION: 22.11.0

node16_container_definition: &NODE16_CONTAINER_DEFINITION
  <<: *NODE_MIN_SUPPORTED_CONTAINER_DEFINITION
  eks_container:
    docker_arguments:
      NODE_VERSION: 16.20.2

maven_cache_definition: &MAVEN_CACHE
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
    fingerprint_script: |
      if [ "$CIRRUS_OS" = "windows" ]; then
        powershell.exe -NoLogo -Command "Get-ChildItem -Path . -Filter "pom.xml" -Recurse -ErrorAction SilentlyContinue -Force | cat"
      fi
      if [ "$CIRRUS_OS" = "linux" ]; then
        find . -name pom.xml -exec cat {} \+
      fi

orchestrator_cache_preparation_definition_monthly: &ORCHESTRATOR_CACHE_MONTHLY
  set_orchestrator_home_script: |
    export THIS_MONTH=$(date '+%Y-%m')
    echo "THIS_MONTH=${THIS_MONTH}" >> $CIRRUS_ENV
    echo "ORCHESTRATOR_HOME=${CIRRUS_WORKING_DIR}/orchestrator/${THIS_MONTH}" >> $CIRRUS_ENV
  mkdir_orchestrator_home_script: |
    echo "Create dir ${ORCHESTRATOR_HOME} if needed"
    mkdir -p ${ORCHESTRATOR_HOME}
  orchestrator_cache:
    folder: ${ORCHESTRATOR_HOME}
    fingerprint_script: echo ${THIS_MONTH}
    reupload_on_changes: 'true'

orchestrator_cache_preparation_definition: &ORCHESTRATOR_CACHE
  set_orchestrator_home_script: |
    export TODAY=$(date '+%Y-%m-%d')
    echo "TODAY=${TODAY}" >> $CIRRUS_ENV
    echo "ORCHESTRATOR_HOME=${CIRRUS_WORKING_DIR}/orchestrator/${TODAY}" >> $CIRRUS_ENV
  mkdir_orchestrator_home_script: |
    echo "Create dir ${ORCHESTRATOR_HOME} if needed"
    mkdir -p ${ORCHESTRATOR_HOME}
  orchestrator_cache:
    folder: ${ORCHESTRATOR_HOME}
    fingerprint_script: echo ${TODAY}
    reupload_on_changes: 'true'

npmrc_script_definition: &NPMRC_SCRIPT_DEFINITION
  npmrc_script:
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/.npmrc
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/packages/jsts/src/rules/.npmrc
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/its/eslint8-plugin-sonarjs/.npmrc
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/its/eslint9-plugin-sonarjs/.npmrc

npm_cache_definition: &NPM_CACHE
  <<: *NPMRC_SCRIPT_DEFINITION
  npm_cache:
    folder: ${CIRRUS_WORKING_DIR}/node_modules
    fingerprint_script: cat package-lock.json
    populate_script: npm ci

npm_win_cache_definition: &NPM_WIN_CACHE
  <<: *NPMRC_SCRIPT_DEFINITION
  npm_win_cache:
    folder: ${CIRRUS_WORKING_DIR}/node_modules
    fingerprint_script: echo "WIN$(cat package-lock.json)"
    populate_script: npm ci

eslint_build_cache_definition: &ESLINT_BUILD_CACHE
  eslint_build_cache:
    folder: ${CIRRUS_WORKING_DIR}/lib
    fingerprint_script: echo "ESLINT$(git rev-parse HEAD)"

js_coverage_cache_definition: &JS_COVERAGE_CACHE
  js_coverage_cache:
    folder: ${CIRRUS_WORKING_DIR}/coverage/js
    fingerprint_script: echo "JS$(git rev-parse HEAD)"
    reupload_on_changes: 'true'

java_coverage_cache_definition: &JAVA_COVERAGE_CACHE
  java_coverage_cache:
    folder: ${CIRRUS_WORKING_DIR}/coverage/java
    fingerprint_script: echo "JAVA$(git rev-parse HEAD)"
    reupload_on_changes: 'true'

win_vm_definition: &WINDOWS_VM_DEFINITION
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    image: base-windows-jdk17-v*
    platform: windows
    region: eu-central-1
    type: c6id.4xlarge
    preemptible: false
    use_ssd: true

analyze_definition: &ANALYZE_DEFINITION
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  depends_on:
    - test_js
    - test_java
  <<: *MAVEN_CACHE
  <<: *NPM_CACHE
  <<: *JS_COVERAGE_CACHE
  <<: *JAVA_COVERAGE_CACHE
  analyze_script:
    - source cirrus-env BUILD
    - PULL_REQUEST_SHA=$GIT_SHA1 regular_mvn_build_deploy_analyze -P-deploy-sonarsource,-release,-sign -Dsonar.organization=sonarsource -Dsonar.projectKey="${SONAR_PROJECT_KEY}" -Dcommercial -Dmaven.shade.skip=true -Dmaven.install.skip=true -Dmaven.deploy.skip=true -DskipTests

win_ssd_and_clone:
  &WIN_SSD_AND_CLONE # copy&paste from https://github.com/SonarSource/sonar-cpp/blob/a8c6f1e45a12393508682a013ac7ee35eb92bece/.cirrus.yml#L45
  prepare_disk_script:
    - ps: |
        Get-Disk -Number 2 | Initialize-Disk -PassThru | New-Partition -UseMaximumSize -DriveLetter Z
        Format-Volume -DriveLetter Z -FileSystem NTFS -Confirm:$false
    - echo "CIRRUS_WORKING_DIR=Z:/cirrus-ci-build" >> $CIRRUS_ENV
  # we don't clone submodules because they are not needed for the tests
  clone_script: |
    git config --system core.longpaths true
    if [ -z "$CIRRUS_PR" ]; then
      git clone --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    else
      git clone https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
      git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR
      git reset --hard $CIRRUS_CHANGE_IN_REPO
    fi

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

plugin_qa_body: &PLUGIN_QA_BODY
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  env:
    CIRRUS_CLONE_DEPTH: 10
    SONARSOURCE_QA: true
  <<: *MAVEN_CACHE
  qa_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn -f its/plugin/pom.xml -DskipTests=false -Dsonar.runtimeVersion=${SQ_VERSION} ${MVN_TEST} -B -e -V verify surefire-report:report

build_task:
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  env:
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
    #sign artifacts
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    ARTIFACTORY_DEPLOY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  <<: *MAVEN_CACHE
  <<: *NPM_CACHE
  build_and_deploy_script:
    - source cirrus-env BUILD
    - node --version
    - regular_mvn_build_deploy_analyze -T1C -Dsonar.skip=true -DartifactoryToken=$ARTIFACTORY_ACCESS_TOKEN -DskipTests

build_eslint_task:
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  <<: *NPM_CACHE
  <<: *ESLINT_BUILD_CACHE
  build_and_deploy_script:
    - source cirrus-env BUILD
    - node --version
    - npm run eslint-plugin:build

knip_task:
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  <<: *NPMRC_SCRIPT_DEFINITION
  depends_on:
    - build
  knip_script:
    - npm install --no-package-lock
    - npm run bbf
    - npx knip

test_js_task:
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  depends_on:
    - build
  <<: *NPM_CACHE
  <<: *JS_COVERAGE_CACHE
  test_js_script:
    - source cirrus-env QA
    - npm run generate-meta
    - npm run bridge:compile
    - npm run bridge:test:cov

test_java_task:
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  depends_on:
    - build
  <<: *MAVEN_CACHE
  <<: *NPM_CACHE
  <<: *JAVA_COVERAGE_CACHE
  test_java_script:
    - source cirrus-env QA
    - mvn install -T1C -Pcoverage,coverage-report

analyze_next_task:
  <<: *ANALYZE_DEFINITION
  env:
    # analysis on next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    SONAR_PROJECT_KEY: org.sonarsource.javascript:javascript

analyze_SQC_EU_shadow_task:
  <<: *ANALYZE_DEFINITION
  only_if: $CIRRUS_CRON == "nightly"
  env:
    SONAR_TOKEN: VAULT[development/kv/data/sonarcloud data.token]
    SONAR_HOST_URL: https://sonarcloud.io
    SONAR_PROJECT_KEY: SonarSource_SonarJS

analyze_SQC_US_shadow_task:
  <<: *ANALYZE_DEFINITION
  only_if: $CIRRUS_CRON == "nightly"
  env:
    SONAR_TOKEN: VAULT[development/kv/data/sonarqube-us data.token]
    SONAR_HOST_URL: https://sonarqube.us
    SONAR_PROJECT_KEY: SonarSource_SonarJS

run_iris_task:
  <<: *CONTAINER_DEFINITION
  only_if: $CIRRUS_CRON == "nightly"
  depends_on:
    - analyze_SQC_EU_shadow
    - analyze_SQC_US_shadow
  env:
    SONAR_SOURCE_IRIS_TOKEN: VAULT[development/kv/data/iris data.next]
  matrix:
    - name: 'IRIS SQ NEXT -> Sonarcloud.io'
      env:
        SONAR_TARGET_URL: https://sonarcloud.io
        SONAR_TARGET_IRIS_TOKEN: VAULT[development/kv/data/iris data.sqc-eu]
    - name: 'IRIS SQ NEXT -> SonarQube.us'
      env:
        SONAR_TARGET_URL: https://sonarqube.us
        SONAR_TARGET_IRIS_TOKEN: VAULT[development/kv/data/iris data.sqc-us]
  script:
    - source .cirrus/run-iris.sh

build_win_task:
  <<: *WINDOWS_VM_DEFINITION
  <<: *ONLY_SONARSOURCE_QA
  <<: *MAVEN_CACHE
  <<: *NPM_WIN_CACHE
  build_script:
    - source cirrus-env BUILD
    - mvn clean install -e

ws_scan_task:
  depends_on:
    - build
  <<: *NODE_MIN_SUPPORTED_CONTAINER_DEFINITION
  # run only on master and long-term branches
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*")
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  <<: *MAVEN_CACHE
  <<: *NPM_CACHE
  whitesource_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - source ws_scan.sh
  allow_failures: 'true'
  always:
    ws_artifacts:
      path: 'whitesource/**/*'

plugin_qa_with_node_task:
  <<: *PLUGIN_QA_BODY
  <<: *ORCHESTRATOR_CACHE_MONTHLY
  <<: *CONTAINER_DEFINITION
  matrix:
    - NODE_VERSION: 18.20.0
    - NODE_VERSION: 20.12.0
    - NODE_VERSION: 22.11.0
  docker_builder:
    dockerfile: .cirrus/nodejs.Dockerfile
    builder_arguments:
      NODE_VERSION: ${NODE_VERSION}
    docker_arguments:
      CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
  env:
    SQ_VERSION: LATEST_RELEASE
    MVN_TEST: ''

plugin_qa_no_node_task:
  <<: *PLUGIN_QA_BODY
  <<: *CONTAINER_DEFINITION
  <<: *ORCHESTRATOR_CACHE_MONTHLY
  env:
    SQ_VERSION: LATEST_RELEASE
    SONARJS_ARTIFACT: multi
    # EslintCustomRulesTest requires Node.js in host OS
    MVN_TEST: '-Dtest=!EslintCustomRulesTest --projects !org.sonarsource.javascript:eslint-custom-rules-plugin'

plugin_qa_no_node_alpine_task:
  <<: *PLUGIN_QA_BODY
  <<: *ALPINE_CONTAINER_DEFINITION
  <<: *ORCHESTRATOR_CACHE_MONTHLY
  env:
    SQ_VERSION: LATEST_RELEASE
    SONARJS_ARTIFACT: linux-x64-musl
    # EslintCustomRulesTest requires Node.js in host OS
    MVN_TEST: '-Dtest=!EslintCustomRulesTest --projects !org.sonarsource.javascript:eslint-custom-rules-plugin'

plugin_qa_sq_dev_task:
  <<: *PLUGIN_QA_BODY
  <<: *CONTAINER_DEFINITION
  <<: *ORCHESTRATOR_CACHE
  env:
    SQ_VERSION: 'DEV'
    SONARJS_ARTIFACT: multi
    # EslintCustomRulesTest requires Node.js in host OS
    MVN_TEST: '-Dtest=!EslintCustomRulesTest --projects !org.sonarsource.javascript:eslint-custom-rules-plugin'

# Plugin QA for Windows is split into 3 parts to make it faster
plugin_qa_win_task:
  depends_on:
    - build
  <<: *WINDOWS_VM_DEFINITION
  <<: *ONLY_SONARSOURCE_QA
  env:
    SONARSOURCE_QA: true
    SQ_VERSION: LATEST_RELEASE
    matrix:
      - TEST: '!CoverageTest,!TypeScriptAnalysisTest,!EslintBasedRulesTest,!PRAnalysisTest,!TypeCheckerConfigTest,!VueAnalysisTest'
      - TEST: 'CoverageTest,TypeScriptAnalysisTest,EslintBasedRulesTest,PRAnalysisTest,TypeCheckerConfigTest,VueAnalysisTest'
  <<: *WIN_SSD_AND_CLONE
  <<: *MAVEN_CACHE
  <<: *ORCHESTRATOR_CACHE_MONTHLY
  qa_script:
    - source /c/buildTools-docker/bin/cirrus-env QA
    - source /c/buildTools-docker/bin/set_maven_build_version $BUILD_NUMBER
    # building the custom plugin required for the further tests
    - mvn clean package -f its/plugin/plugins/pom.xml
    - mvn test -f its/plugin/tests/pom.xml -DskipTests=false -Dsonar.runtimeVersion=${SQ_VERSION} "-Dtest=${TEST}" -B -e -V surefire-report:report

# Plugin QA for Windows is split into 3 parts to make it faster
plugin_qa_win_sonarlint_task:
  depends_on:
    - build
  <<: *WINDOWS_VM_DEFINITION
  <<: *ONLY_SONARSOURCE_QA
  env:
    SONARSOURCE_QA: true
    SQ_VERSION: LATEST_RELEASE
  <<: *WIN_SSD_AND_CLONE
  <<: *MAVEN_CACHE
  qa_script:
    - source /c/buildTools-docker/bin/cirrus-env QA
    - source /c/buildTools-docker/bin/set_maven_build_version $BUILD_NUMBER
    - mvn test -f its/plugin/sonarlint-tests/pom.xml -DskipTests=false -Dsonar.runtimeVersion=${SQ_VERSION} -B -e -V surefire-report:report

js_ts_ruling_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  env:
    CIRRUS_CLONE_DEPTH: 1
    SONARSOURCE_QA: true
  <<: *MAVEN_CACHE
  <<: *NPM_CACHE
  # needed because we need to build the plugin
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - npm run build:fast
    - npm run ruling
  on_failure:
    debug_script: diff -rq its/ruling/src/test/expected/jsts packages/ruling/actual/jsts

ruling_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *CONTAINER_DEFINITION
  env:
    CIRRUS_CLONE_DEPTH: 10
    SONARSOURCE_QA: true
  <<: *MAVEN_CACHE
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/ruling
    - mvn test -Dtest=JsTsRulingTest -DskipTests=false -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false -Djunit.jupiter.execution.parallel.config.dynamic.factor=1 -B -e -V
  cleanup_before_cache_script: cleanup_maven_repository
  on_failure:
    diff_artifacts:
      path: '**/target/actual/**/*'

eslint9_node18_plugin_test_task:
  depends_on:
    - build_eslint
  <<: *NODE_MIN_SUPPORTED_CONTAINER_DEFINITION
  env:
    CIRRUS_CLONE_DEPTH: 1
    SONARSOURCE_QA: true
  <<: *ESLINT_BUILD_CACHE
  <<: *NPMRC_SCRIPT_DEFINITION
  # needed because we need to build the plugin
  eslint_its_script:
    - node --version
    - cd its/eslint9-plugin-sonarjs
    - npm install
    - npx tsc --noEmit # check typings for tseslint.config.ts
    - npm run test

eslint8_node18_plugin_test_task:
  depends_on:
    - build_eslint
  <<: *NODE_MIN_SUPPORTED_CONTAINER_DEFINITION
  env:
    CIRRUS_CLONE_DEPTH: 1
    SONARSOURCE_QA: true
  <<: *ESLINT_BUILD_CACHE
  <<: *NPMRC_SCRIPT_DEFINITION
  # needed because we need to build the plugin
  eslint_its_script:
    - node --version
    - cd its/eslint8-plugin-sonarjs
    - npm install
    - npx tsc --noEmit # check typings for tseslint.config.ts
    - npm run test

eslint8_node16_plugin_test_task:
  depends_on:
    - build_eslint
  <<: *NODE16_CONTAINER_DEFINITION
  env:
    CIRRUS_CLONE_DEPTH: 1
    SONARSOURCE_QA: true
  <<: *ESLINT_BUILD_CACHE
  <<: *NPMRC_SCRIPT_DEFINITION
  # needed because we need to build the plugin
  eslint_its_script:
    - node --version
    - source cirrus-env QA
    - cd its/eslint8-plugin-sonarjs
    - npm install
    - npx tsc --noEmit # check typings for tseslint.config.ts
    - npm run test

css_ruling_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *CONTAINER_DEFINITION
  env:
    CIRRUS_CLONE_DEPTH: 10
    SONARSOURCE_QA: true
  <<: *MAVEN_CACHE
  <<: *ORCHESTRATOR_CACHE_MONTHLY
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/ruling
    - mvn test -DskipTests=false -Dtest=CssRulingTest -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false -Djunit.jupiter.execution.parallel.config.dynamic.factor=1 -B -e -V
  on_failure:
    diff_artifacts:
      path: '**/target/actual/**/*'

promote_task:
  depends_on:
    - ws_scan
    - build_win
    - plugin_qa_with_node
    - plugin_qa_no_node
    - plugin_qa_no_node_alpine
    - plugin_qa_sq_dev
    - plugin_qa_win
    - css_ruling
    - ruling
    - js_ts_ruling
    - analyze_next
    - analyze_SQC_EU_shadow
    - analyze_SQC_US_shadow
  <<: *ONLY_SONARSOURCE_QA
  <<: *SMALL_CONTAINER
  env:
    ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
  <<: *MAVEN_CACHE
  script: cirrus_promote_maven

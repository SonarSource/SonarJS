# This file is automatically generated by tools/generate-cirrus-from-template.js
# Do not edit manually! Edit .cirrus.template.yml instead.
# @generated
env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.artifactory_url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]

  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

container_definition: &CONTAINER_DEFINITION
  eks_container:
    cluster_name: ${CIRRUS_CLUSTER_NAME}
    builder_role: cirrus-builder
    builder_image: docker-builder-v*
    builder_instance_type: t3.small
    region: eu-central-1
    namespace: default
    use_in_memory_disk: true
    image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
    cpu: 10
    memory: 40G

alpine_container_definition: &ALPINE_CONTAINER_DEFINITION
  <<: *CONTAINER_DEFINITION
  eks_container:
    dockerfile: .cirrus/alpine.Dockerfile

small_container_definition: &SMALL_CONTAINER
  <<: *CONTAINER_DEFINITION
  eks_container:
    cpu: 2
    memory: 4G

node_min_supported_container_definition: &NODE_MIN_SUPPORTED_CONTAINER_DEFINITION
  <<: *CONTAINER_DEFINITION
  eks_container:
    dockerfile: .cirrus/nodejs.Dockerfile
    docker_arguments:
      CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}

node_recommended_container_definition: &NODE_RECOMMENDED_CONTAINER_DEFINITION
  <<: *NODE_MIN_SUPPORTED_CONTAINER_DEFINITION
  eks_container:
    docker_arguments:
      NODE_VERSION: 22.11.0

node16_container_definition: &NODE16_CONTAINER_DEFINITION
  <<: *NODE_MIN_SUPPORTED_CONTAINER_DEFINITION
  eks_container:
    docker_arguments:
      NODE_VERSION: 16.20.2

maven_cache_definition: &MAVEN_CACHE
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
    fingerprint_script: |
      if [ "$CIRRUS_OS" = "windows" ]; then
        powershell.exe -NoLogo -Command "Get-ChildItem -Path . -Filter "pom.xml" -Recurse -ErrorAction SilentlyContinue -Force | cat"
      fi
      if [ "$CIRRUS_OS" = "linux" ]; then
        find . -name pom.xml -exec cat {} \+
      fi

orchestrator_cache_preparation_definition_monthly: &ORCHESTRATOR_CACHE_MONTHLY
  set_orchestrator_home_script: |
    export THIS_MONTH=$(date '+%Y-%m')
    echo "THIS_MONTH=${THIS_MONTH}" >> $CIRRUS_ENV
    echo "ORCHESTRATOR_HOME=${CIRRUS_WORKING_DIR}/orchestrator/${THIS_MONTH}" >> $CIRRUS_ENV
  mkdir_orchestrator_home_script: |
    echo "Create dir ${ORCHESTRATOR_HOME} if needed"
    mkdir -p ${ORCHESTRATOR_HOME}
  orchestrator_cache:
    folder: ${ORCHESTRATOR_HOME}
    fingerprint_script: echo ${THIS_MONTH}
    reupload_on_changes: 'true'

orchestrator_cache_preparation_definition: &ORCHESTRATOR_CACHE
  set_orchestrator_home_script: |
    export TODAY=$(date '+%Y-%m-%d')
    echo "TODAY=${TODAY}" >> $CIRRUS_ENV
    echo "ORCHESTRATOR_HOME=${CIRRUS_WORKING_DIR}/orchestrator/${TODAY}" >> $CIRRUS_ENV
  mkdir_orchestrator_home_script: |
    echo "Create dir ${ORCHESTRATOR_HOME} if needed"
    mkdir -p ${ORCHESTRATOR_HOME}
  orchestrator_cache:
    folder: ${ORCHESTRATOR_HOME}
    fingerprint_script: echo ${TODAY}
    reupload_on_changes: 'true'

npmrc_script_definition: &NPMRC_SCRIPT_DEFINITION
  npmrc_script:
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/.npmrc
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/packages/jsts/src/rules/.npmrc
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/its/eslint8-plugin-sonarjs/.npmrc
    - cp .cirrus/npmrc $CIRRUS_WORKING_DIR/its/eslint9-plugin-sonarjs/.npmrc

npm_cache_definition: &NPM_CACHE
  <<: *NPMRC_SCRIPT_DEFINITION
  npm_cache:
    folder: ${CIRRUS_WORKING_DIR}/node_modules
    fingerprint_script: cat package-lock.json
    populate_script: npm ci

npm_win_cache_definition: &NPM_WIN_CACHE
  <<: *NPMRC_SCRIPT_DEFINITION
  npm_win_cache:
    folder: ${CIRRUS_WORKING_DIR}/node_modules
    fingerprint_script: echo "WIN$(cat package-lock.json)"
    populate_script: npm ci

eslint_build_cache_definition: &ESLINT_BUILD_CACHE
  eslint_build_cache:
    folder: ${CIRRUS_WORKING_DIR}/lib
    fingerprint_script: echo "ESLINT$(git rev-parse HEAD)"

js_coverage_cache_definition: &JS_COVERAGE_CACHE
  js_coverage_cache:
    folder: ${CIRRUS_WORKING_DIR}/coverage/js
    fingerprint_script: echo "JS$(git rev-parse HEAD)"
    reupload_on_changes: 'true'

java_coverage_cache_definition: &JAVA_COVERAGE_CACHE
  java_coverage_cache:
    folder: ${CIRRUS_WORKING_DIR}/coverage/java
    fingerprint_script: echo "JAVA$(git rev-parse HEAD)"
    reupload_on_changes: 'true'

win_vm_definition: &WINDOWS_VM_DEFINITION
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    image: base-windows-jdk17-v*
    platform: windows
    region: eu-central-1
    type: c6id.4xlarge
    preemptible: false
    use_ssd: true

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

plugin_qa_body: &PLUGIN_QA_BODY
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  env:
    CIRRUS_CLONE_DEPTH: 1
    SONARSOURCE_QA: true
  qa_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn package -f its/plugin/plugins/consumer-plugin/pom.xml
    - mvn -f its/plugin/sonarlint-tests/pom.xml -DskipTests=false -Dsonar.runtimeVersion=${SQ_VERSION} -B -e -V verify surefire-report:report
    - mvn -f its/plugin/tests/pom.xml -DskipTests=false -Dsonar.runtimeVersion=${SQ_VERSION} -B -e -V verify surefire-report:report

plugin_qa_fast_body: &PLUGIN_QA_FAST_BODY
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  env:
    CIRRUS_CLONE_DEPTH: 1
    SONARSOURCE_QA: true
  qa_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn package -f its/plugin/plugins/pom.xml ${IGNORE_CLASSES}
    - mvn -f its/plugin/fast-tests/pom.xml -DskipTests=false -Dsonar.runtimeVersion=${SQ_VERSION} ${MVN_TEST} -B -e -V verify surefire-report:report

build_task:
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  env:
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
    #sign artifacts
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    ARTIFACTORY_DEPLOY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  <<: *MAVEN_CACHE
  <<: *NPM_CACHE
  build_and_deploy_script:
    - source cirrus-env BUILD
    - node --version
    - regular_mvn_build_deploy_analyze -T1C -Dsonar.skip=true -DartifactoryToken=$ARTIFACTORY_ACCESS_TOKEN -DskipTests

test_js_task:
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  depends_on:
    - build
  <<: *NPM_CACHE
  <<: *JS_COVERAGE_CACHE
  test_js_script:
    - source cirrus-env QA
    - npm run generate-meta
    - npm run bridge:compile
    - npm run bridge:test:cov

test_java_task:
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  depends_on:
    - build
  <<: *MAVEN_CACHE
  <<: *NPM_CACHE
  <<: *JAVA_COVERAGE_CACHE
  test_java_script:
    - source cirrus-env QA
    - mvn install -T1C -Pcoverage,coverage-report

plugin_qa_with_node_task:
  alias: plugin_qa_with_node
  <<: *MAVEN_CACHE
  <<: *PLUGIN_QA_BODY
  <<: *ORCHESTRATOR_CACHE_MONTHLY
  <<: *CONTAINER_DEFINITION
  eks_container:
    dockerfile: .cirrus/nodejs.Dockerfile
    docker_arguments:
      CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
  env:
    SQ_VERSION: LATEST_RELEASE
  # AUTOGENERATED LIST OF NODE VERSIONS BELOW
  matrix:
    - name: 'QA with node 22 on host Ubuntu SQ:LATEST'
      eks_container:
        docker_arguments:
          NODE_VERSION: 22.11.0

plugin_qa_fast_with_node_task:
  alias: plugin_qa_fast_with_node
  <<: *MAVEN_CACHE
  <<: *PLUGIN_QA_FAST_BODY
  <<: *CONTAINER_DEFINITION
  eks_container:
    dockerfile: .cirrus/nodejs.Dockerfile
    docker_arguments:
      CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
  env:
    SQ_VERSION: LATEST_RELEASE
    MVN_TEST: ''
    IGNORE_CLASSES: ''
  # AUTOGENERATED LIST OF NODE VERSIONS BELOW
  matrix:
    - name: 'Fast QA with node 22 on host Ubuntu SQ:LATEST'
      eks_container:
        docker_arguments:
          NODE_VERSION: 22.11.0

js_ts_ruling_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  env:
    CIRRUS_CLONE_DEPTH: 1
    SONARSOURCE_QA: true
  <<: *MAVEN_CACHE
  <<: *NPM_CACHE
  # needed because we need to build the plugin
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - npm run build:fast
    - npm run ruling
  on_failure:
    debug_script:
      - sh tools/ruling-debug-script.sh packages/ruling/actual/jsts

js_ts_ruling_deno_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *NODE_RECOMMENDED_CONTAINER_DEFINITION
  env:
    CIRRUS_CLONE_DEPTH: 1
    SONARSOURCE_QA: true
  <<: *MAVEN_CACHE
  <<: *NPM_CACHE
  # needed because we need to build the plugin
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - npm run build:fast
    - npm run ruling-deno
  on_failure:
    debug_script:
      - sh tools/ruling-debug-script.sh packages/ruling/actual/jsts

ruling_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *NODE_MIN_SUPPORTED_CONTAINER_DEFINITION
  env:
    CIRRUS_CLONE_DEPTH: 10
    SONARSOURCE_QA: true
  <<: *MAVEN_CACHE
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/ruling
    - mvn test -Dtest=JsTsRulingTest -DskipTests=false -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false -Djunit.jupiter.execution.parallel.config.dynamic.factor=1 -B -e -V
  cleanup_before_cache_script: cleanup_maven_repository
  on_failure:
    debug_script:
      - sh tools/ruling-debug-script.sh its/ruling/target/actual/jsts

css_ruling_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *NODE_MIN_SUPPORTED_CONTAINER_DEFINITION
  env:
    CIRRUS_CLONE_DEPTH: 10
    SONARSOURCE_QA: true
  <<: *MAVEN_CACHE
  <<: *ORCHESTRATOR_CACHE_MONTHLY
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/ruling
    - mvn test -DskipTests=false -Dtest=CssRulingTest -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false -Djunit.jupiter.execution.parallel.config.dynamic.factor=1 -B -e -V
  on_failure:
    diff_artifacts:
      path: '**/target/actual/**/*'
